#!/usr/bin/env node

/**
 * Module dependencies.
 */
//dodato
//dadajemo env variable iz fajla .env u root folderu
const dotenv = require('dotenv').config();
//dotenv.config({ path: './config.env' });

var app = require('../app');
var debug = require('debug')('onebuck-store-api:server');
var http = require('http');

const mongoose = require('mongoose');

//dodato - za uncaughtException greske
process.on('uncaughtException', err => {
  console.log('UNCAUGHT EXCEPTION! ğŸ’¥ Shutting down...');
  console.log(err.name, err.message);
  process.exit(1);
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//dodato
//mongodb+srv://Igor:7yAFr5kaw6R1WpNo@vezbadb.ta91o.mongodb.net/test?retryWrites=true&w=majority
mongoose.connect(`mongodb+srv://${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@${process.env.MONGO_DEFAULT_DATABASE}.ta91o.mongodb.net/test?retryWrites=true&w=majority`, {
  useNewUrlParser: true, 
  useUnifiedTopology: true,
  useCreateIndex: true,
  useFindAndModify: false
})
.then( _ => {
  console.log('Database connection successful!');
  server.listen(port);
})

//.catch(er => console.log('mongoose.connect error: ', er));
/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//dodato - za unhandledRejection greske
process.on('unhandledRejection', err => {
  console.log('UNHANDLED REJECTION! ğŸ’¥ Shutting down...');
  console.log(err.name, err.message);
  server.close(() => {
    process.exit(1);
  });
});

//dodato - za resavanje sigterm signala koji alje heroku
process.on('SIGTERM', () => {
  console.log('ğŸ‘‹ SIGTERM RECEIVED. Shutting down gracefully');
  server.close(() => {
    console.log('ğŸ’¥ Process terminated!');
  });
});
